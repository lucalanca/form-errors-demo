{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SignupSchema","Yup","shape","firstName","min","max","required","lastName","email","App","_React$createElement","react_default","a","createElement","className","for","type","inputmode","step","id","name","pattern","title","list","maxlength","Object","defineProperty","style","marginTop","src","formik_esm","initialValues","validationSchema","_ref","values","errors","touched","handleChange","handleBlur","setFieldTouched","handleSubmit","isSubmitting","htmlFor","onChange","event","target","onBlur","_ref2","_ref3","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b5be395.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\n\nconst SignupSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .min(4, 'Too Short!')\n    .max(10, 'Too Long!')\n    .required('Required'),\n  lastName: Yup.string()\n    .min(4, 'Too Short!')\n    .max(10, 'Too Long!')\n    .required('Required'),\n  email: Yup.string()\n    .email('Invalid email')\n    .required('Required'),\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Common Errors with Form Errors</h1>\n\n        <ol>\n          <li>Forms suck!</li>\n          <li>They suck more if done incorrectly</li>\n          <li>Our projects are heavy on forms.</li>\n          <li>Browser provides very little and ugly defaults</li>\n        </ol>\n\n        <h2>Browser defaults example</h2>\n\n        <form>\n          <p>\n            <label for=\"n1\">How old are you?</label>\n            <input type=\"text\" inputmode='numeric' min=\"12\" max=\"120\" step=\"1\" id=\"n1\" name=\"age\" pattern=\"\\d+\" required />\n          </p>\n          <p>\n            <label for=\"t1\">What's your favorite fruit?<abbr title=\"This field is mandatory\">*</abbr></label>\n            <input type=\"text\" id=\"t1\" name=\"fruit\" list=\"l1\" required\n              pattern=\"[Bb]anana|[Cc]herry|[Aa]pple|[Ss]trawberry|[Ll]emon|[Oo]range\" />\n            <datalist id=\"l1\">\n              <option>Banana</option>\n              <option>Cherry</option>\n              <option>Apple</option>\n              <option>Strawberry</option>\n              <option>Lemon</option>\n              <option>Orange</option>\n            </datalist>\n          </p>\n          <p>\n            <label for=\"t2\">What's your e-mail?</label>\n            <input type=\"email\" id=\"t2\" name=\"email\" required />\n          </p>\n          <p>\n            <label for=\"t3\">Leave a short message</label>\n            <textarea id=\"t3\" name=\"msg\" maxlength='5' maxlength=\"140\" rows=\"5\"></textarea>\n          </p>\n          <p>\n            <button>Submit</button>\n          </p>\n        </form>\n\n        <ol>\n          <li>\n            Ugly Styling (not customizable).\n          </li>\n          <li>\n            Only show errors after submitting.\n          </li>\n          <li>\n            Only the first error (even if there are multiple)\n          </li>\n          <li>\n            Only on modern browsers.\n          </li>\n        </ol>\n\n\n        <h2>Error 1: You are not really testing them, even if you kind of are</h2>\n\n        <ul>\n          <li>If users are not actively filling fields, what are we testing in reality?</li>\n          <li>If all it takes to get a form correctly filled is find the nearest hot-spot, you are ignoring the \"Messy Middle\" experiencep.</li>\n          <li>It's simply impossible to test with low-fidelity prototypes (no, Invision is not high-fidelity when it comes to forms)</li>\n        </ul>\n\n\n\n        <h2>Error 2: Where to show the error</h2>\n\n        <div style={{ marginTop: '5rem' }}>\n          <img src='http://uxmovement.com/wp-content/uploads/2018/04/error_message-comparison.png' />\n        </div>\n        <div style={{ marginTop: '5rem' }}>\n          <img src='http://uxmovement.com/wp-content/uploads/2018/04/error_message-preference.png' />\n        </div>\n        <div style={{ marginTop: '5rem' }}>\n          <img src='http://uxmovement.com/wp-content/uploads/2018/04/error_message-right.png' />\n        </div>\n        <div style={{ marginTop: '5rem' }}>\n          <img src='http://uxmovement.com/wp-content/uploads/2018/04/error_message-left.png' />\n        </div>\n        <div style={{ marginTop: '5rem' }}>\n          <img src='http://uxmovement.com/wp-content/uploads/2018/04/error_message-above.png' />\n        </div>\n        <div style={{ marginTop: '5rem' }}>\n          <img src='http://uxmovement.com/wp-content/uploads/2018/04/error_message-below.png' />\n        </div>\n\n        <h2>Error 3: When to show the error?</h2>\n\n        <h3>Show if the user tries to submit the form</h3>\n\n        <Formik\n          initialValues={{\n            firstName: '',\n            lastName: '',\n            email: '',\n          }}\n          validationSchema={SignupSchema}\n        >\n          {({\n            values,\n            errors,\n            touched,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n            isSubmitting,\n            setFieldTouched\n          }) => (\n              <Form>\n                <div>\n                  <div>\n                    <label htmlFor='firstName'>Firstname</label>\n                    <small>(required, min: 4, max: 10)</small>\n                  </div>\n                  <input\n                    type='text'\n                    onChange={(event) => {\n                      handleChange(event);\n                      setFieldTouched(event.target.name, true);\n                    }}\n                    onBlur={handleBlur}\n                    name=\"firstName\"\n                    id='firstName'\n                  />\n                  {errors.firstName && touched.firstName ? (\n                    <small className='error'>{errors.firstName}</small>\n                  ) : null}\n                </div>\n\n\n                <div>\n                  <div>\n                    <label htmlFor='lastName'>Lastname</label>\n                    <small>(required, min: 4, max: 10)</small>\n                  </div>\n\n                  <input\n                    type='text'\n                    onChange={(event) => {\n                      handleChange(event);\n                      setFieldTouched(event.target.name, true);\n                    }}\n                    onBlur={handleBlur}\n                    name=\"lastName\"\n                    id='lastName'\n                  />\n                  {errors.lastName && touched.lastName ? (\n                    <small className='error'>{errors.lastName}</small>\n                  ) : null}\n                </div>\n\n                <div>\n                  <div>\n                    <label htmlFor='email'>Email</label>\n                    <small>(valid email)</small>\n                  </div>\n                  <input\n                    type='email'\n                    onChange={(event) => {\n                      handleChange(event);\n                      setFieldTouched(event.target.name, true);\n                    }}\n                    onBlur={handleBlur}\n                    name=\"email\"\n                    id='email'\n                  />\n                  {errors.email && touched.email ? <small className='error'>{errors.email}</small> : null}\n                </div>\n\n                <div>\n                  <button type=\"submit\">Submit</button>\n                </div>\n              </Form>\n            )}\n        </Formik>\n\n        <h3>Show when typing</h3>\n\n        <Formik\n          initialValues={{\n            firstName: '',\n            lastName: '',\n            email: '',\n          }}\n          validationSchema={SignupSchema}\n        >\n          {({\n            values,\n            errors,\n            touched,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n            isSubmitting,\n            setFieldTouched\n          }) => (\n              <Form>\n                <div>\n                  <div>\n                    <label htmlFor='firstName'>Firstname</label>\n                    <small>(required, min: 4, max: 10)</small>\n                  </div>\n                  <input\n                    type='text'\n                    onChange={(event) => {\n                      handleChange(event);\n                      setFieldTouched(event.target.name, true);\n                    }}\n                    onBlur={handleBlur}\n                    name=\"firstName\"\n                    id='firstName'\n                  />\n                  {errors.firstName && touched.firstName ? (\n                    <small className='error'>{errors.firstName}</small>\n                  ) : null}\n                </div>\n\n\n                <div>\n                  <div>\n                    <label htmlFor='lastName'>Lastname</label>\n                    <small>(required, min: 4, max: 10)</small>\n                  </div>\n\n                  <input\n                    type='text'\n                    onChange={(event) => {\n                      handleChange(event);\n                      setFieldTouched(event.target.name, true);\n                    }}\n                    onBlur={handleBlur}\n                    name=\"lastName\"\n                    id='lastName'\n                  />\n                  {errors.lastName && touched.lastName ? (\n                    <small className='error'>{errors.lastName}</small>\n                  ) : null}\n                </div>\n\n                <div>\n                  <div>\n                    <label htmlFor='email'>Email</label>\n                    <small>(valid email)</small>\n                  </div>\n                  <input\n                    type='email'\n                    onChange={(event) => {\n                      handleChange(event);\n                      setFieldTouched(event.target.name, true);\n                    }}\n                    onBlur={handleBlur}\n                    name=\"email\"\n                    id='email'\n                  />\n                  {errors.email && touched.email ? <small className='error'>{errors.email}</small> : null}\n                </div>\n\n                <div>\n                  <button type=\"submit\">Submit</button>\n                </div>\n              </Form>\n            )}\n        </Formik>\n\n\n        <h3>Show when leaving the field</h3>\n\n        <Formik\n          initialValues={{\n            firstName: '',\n            lastName: '',\n            email: '',\n          }}\n          validationSchema={SignupSchema}\n        >\n          {({\n            values,\n            errors,\n            touched,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n            isSubmitting,\n            setFieldTouched\n          }) => (\n              <Form>\n                <div>\n                  <div>\n                    <label htmlFor='firstName'>Firstname</label>\n                    <small>(required, min: 4, max: 10)</small>\n                  </div>\n                  <input\n                    type='text'\n                    onChange={(event) => {\n                      handleChange(event);\n                      setFieldTouched(event.target.name, true);\n                    }}\n                    onBlur={handleBlur}\n                    name=\"firstName\"\n                    id='firstName'\n                  />\n                  {errors.firstName && touched.firstName ? (\n                    <small className='error'>{errors.firstName}</small>\n                  ) : null}\n                </div>\n\n\n                <div>\n                  <div>\n                    <label htmlFor='lastName'>Lastname</label>\n                    <small>(required, min: 4, max: 10)</small>\n                  </div>\n\n                  <input\n                    type='text'\n                    onChange={(event) => {\n                      handleChange(event);\n                      setFieldTouched(event.target.name, true);\n                    }}\n                    onBlur={handleBlur}\n                    name=\"lastName\"\n                    id='lastName'\n                  />\n                  {errors.lastName && touched.lastName ? (\n                    <small className='error'>{errors.lastName}</small>\n                  ) : null}\n                </div>\n\n                <div>\n                  <div>\n                    <label htmlFor='email'>Email</label>\n                    <small>(valid email)</small>\n                  </div>\n                  <input\n                    type='email'\n                    onChange={(event) => {\n                      handleChange(event);\n                      setFieldTouched(event.target.name, true);\n                    }}\n                    onBlur={handleBlur}\n                    name=\"email\"\n                    id='email'\n                  />\n                  {errors.email && touched.email ? <small className='error'>{errors.email}</small> : null}\n                </div>\n\n                <div>\n                  <button type=\"submit\">Submit</button>\n                </div>\n              </Form>\n            )}\n        </Formik>\n\n\n\n\n        <h3>My two cents (trigger for discussion):</h3>\n        <ol>\n          <li>\n            it depends on the validation rule\n            <ul>\n              <li><strong>required:</strong> when leaving the field</li>\n              <li>\n                <strong>min:</strong> wait a little for the user to stop typing\n              </li>\n              <li>\n                <strong>max:</strong> as soon as limit is reached\n              </li>\n              <li>\n                <strong>email:</strong> wait a little for the user to stop typing\n              </li>\n              <li>\n                <strong>email already exists:</strong> as soon as we know of it (we need to ask the backend)\n              </li>\n            </ul>\n          </li>\n          <li>\n            show when submitting (and show all)\n          </li>\n          <li>\n            scroll to first error (if it's not within the screen)\n          </li>\n        </ol>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}